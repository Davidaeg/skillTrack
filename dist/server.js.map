{"version":3,"sources":["../src/server.mts","../src/env.mts","../src/plugins/prisma.mts","../src/routes/auth.mts","../src/utils/auth.mts","../src/graphql/schema.ts","../src/graphql/resolvers/query.ts","../src/graphql/resolvers/mutation.ts"],"sourcesContent":["import cors from \"@fastify/cors\";\nimport fastifySwagger from \"@fastify/swagger\";\nimport fastifySwaggerUI from \"@fastify/swagger-ui\";\nimport jwt from \"@fastify/jwt\";\nimport fastify, { FastifyInstance } from \"fastify\";\nimport {\n  serializerCompiler,\n  validatorCompiler,\n  ZodTypeProvider,\n} from \"fastify-type-provider-zod\";\nimport { env } from \"@env\";\nimport { SwaggerTheme, SwaggerThemeNameEnum } from \"swagger-themes\";\nimport { prismaPlugin } from \"@plugins/prisma.mts\";\nimport { authRoutes } from \"@routes/auth.mts\";\nimport { verifyJWT } from \"@utils/auth.mts\";\nimport { mercurius } from \"mercurius\";\nimport { schema } from \"@graphql/schema.js\";\nimport { Context } from \"@graphql/resolvers/typedefs.js\";\nimport { Query } from \"@graphql/resolvers/query.js\";\nimport { Mutation } from \"@graphql/resolvers/mutation.js\";\n\nexport const app = fastify().withTypeProvider<ZodTypeProvider>();\n\nconst theme = new SwaggerTheme();\nconst content = theme.getBuffer(SwaggerThemeNameEnum.DARK);\n\napp.register(cors, {\n  origin: \"*\",\n});\n\napp.register(prismaPlugin);\n\napp.register(fastifySwagger, {\n  swagger: {\n    consumes: [\"application/json\"],\n    produces: [\"application/json\"],\n    info: {\n      title: \"Blog API\",\n      description: \"API for my blog project.\",\n      version: \"1.0.0\",\n    },\n  },\n});\n\napp.register(fastifySwaggerUI, {\n  routePrefix: \"/docs\",\n  theme: {\n    css: [{ filename: \"theme.css\", content: content }],\n  },\n});\n\napp.setValidatorCompiler(validatorCompiler);\napp.setSerializerCompiler(serializerCompiler);\n\napp.register(jwt, {\n  secret: env.JWT_SECRET,\n  cookie: {\n    cookieName: \"token\",\n    signed: false,\n  },\n});\n\napp.get(\"/health\", async () => ({ status: \"ok\" }));\napp.register(authRoutes, { prefix: \"/auth\" });\n\napp.register(async (fastify: FastifyInstance) => {\n  fastify.setValidatorCompiler(() => () => ({\n    value: undefined,\n    error: undefined,\n  }));\n  fastify.setSerializerCompiler(() => {\n    return (payload: any) => JSON.stringify(payload);\n  });\n\n  fastify.addHook(\"preValidation\", async (req, reply) => {\n    try {\n      await req.jwtVerify();\n    } catch {\n      console.log(\"Unauthorized\");\n      reply.status(401).send({ error: \"Unauthorized\" });\n    }\n  });\n\n  fastify.register(mercurius as any, {\n    schema,\n    resolvers: { Query, Mutation },\n    context: (request: any) => {\n      const user = (request.user as Context[\"user\"]) ?? null;\n      return { prisma: fastify.prisma, user } as Context;\n    },\n    graphiql: true,\n  });\n});\n\napp.get(\"/protected\", { preHandler: [verifyJWT] }, async (req, reply) => {\n  const userId = (req.user as any).sub;\n  return {\n    status: \"ok\",\n    userId,\n  };\n});\n\nconst start = async () => {\n  app.listen({ port: env.PORT, host: \"0.0.0.0\" }).then(() => {\n    console.log(\"Server running on port \" + env.PORT);\n  });\n};\n\nstart();\n","import { z } from \"zod\";\nimport { config } from \"dotenv\";\n\nif (process.env.NODE_ENV === \"test\") {\n  config({ path: \".env.test\", override: true });\n} else {\n  config();\n}\n\nexport const envSchema = z.object({\n  NODE_ENV: z\n    .enum([\"development\", \"test\", \"production\"])\n    .default(\"development\"),\n  DATABASE_URL: z.string().url().min(1),\n  PORT: z.coerce.number().default(3000),\n  JWT_SECRET: z.string().min(10),\n});\n\nexport const env = envSchema.parse(process.env);\n","import fp from \"fastify-plugin\";\nimport { PrismaClient } from \"@prisma/client/index.js\";\n\ndeclare module \"fastify\" {\n  interface FastifyInstance {\n    prisma: PrismaClient;\n  }\n}\n\nexport const prismaPlugin = fp(async (fastify) => {\n  const client = new PrismaClient();\n  await client.$connect();\n  fastify.decorate(\"prisma\", client);\n\n  fastify.addHook(\"onClose\", async () => {\n    console.log(\"closing prisma\");\n\n    await client.$disconnect();\n  });\n});\n","import { FastifyPluginAsync } from \"fastify\";\nimport { z } from \"zod\";\nimport bcrypt from \"bcrypt\";\n\nconst registerBody = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n  name: z.string().optional(),\n});\n\nconst loginBody = z.object({\n  email: z.string().email(),\n  password: z.string(),\n});\n\nexport const authRoutes: FastifyPluginAsync = async (app) => {\n  app.post(\n    \"/register\",\n    {\n      schema: { body: registerBody },\n      attachValidation: true,\n    },\n    async (req, reply) => {\n      if (req.validationError) {\n        return reply.status(400).send(req.validationError);\n      }\n      const { email, password, name } = registerBody.parse(req.body);\n      const existing = await app.prisma.user.findUnique({ where: { email } });\n      if (existing) {\n        return reply.status(409).send({ message: \"Email already in use\" });\n      }\n      const hash = await bcrypt.hash(password, 10);\n      const user = await app.prisma.user.create({\n        data: { email, passwordHash: hash, name, role: \"USER\" },\n      });\n      const token = app.jwt.sign({ sub: user.id, role: user.role });\n      return reply.send({\n        token,\n        user: { id: user.id, email, name, role: user.role },\n      });\n    }\n  );\n\n  app.post(\n    \"/login\",\n    {\n      schema: { body: loginBody },\n      attachValidation: true,\n    },\n    async (req, reply) => {\n      if (req.validationError) {\n        return reply.status(400).send(req.validationError);\n      }\n      const { email, password } = loginBody.parse(req.body);\n      const user = await app.prisma.user.findUnique({ where: { email } });\n      if (!user || !user.passwordHash) {\n        return reply.status(401).send({ message: \"Invalid credentials\" });\n      }\n      const valid = await bcrypt.compare(password, user.passwordHash);\n      if (!valid) {\n        return reply.status(401).send({ message: \"Invalid credentials\" });\n      }\n      const token = app.jwt.sign({ sub: user.id, role: user.role });\n      return reply.send({\n        token,\n        user: {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          role: user.role,\n        },\n      });\n    }\n  );\n};\n","import { FastifyReply, FastifyRequest } from \"fastify\";\n\nexport async function verifyJWT(request: FastifyRequest, reply: FastifyReply) {\n  try {\n    await request.jwtVerify();\n  } catch (err) {\n    return reply.send(err);\n  }\n}\n","export const schema = `\n  enum Role {\n    USER\n    ADMIN\n  }\n\n  type User {\n    id: ID!\n    name: String\n    email: String!\n    role: Role!\n  }\n\n  type Module {\n    id: ID!\n    title: String!\n    description: String!\n    createdAt: String!\n    updatedAt: String!\n  }\n\n  type UserModule {\n    id: ID!\n    module: Module!\n    progress: Int!\n  }\n\n  type Query {\n    me: User\n    modules: [Module!]!\n    myProgress: [UserModule!]!\n  }\n\n  type Mutation {\n    createModule(title: String!, description: String!): Module!\n    updateProgress(moduleId: ID!, progress: Int!): UserModule!\n  }\n`;\n","import { Context } from \"@graphql/resolvers/typedefs\";\n\nexport const Query = {\n  me: async (_: unknown, __: unknown, ctx: Context) => {\n    const { prisma, user } = ctx;\n    if (!user) return null;\n    return prisma.user.findUnique({ where: { id: user.sub } });\n  },\n\n  modules: async (_: unknown, __: unknown, ctx: Context) => {\n    return ctx.prisma.module.findMany();\n  },\n\n  myProgress: async (_: unknown, __: unknown, ctx: Context) => {\n    const user = ctx.user;\n    if (!user) return [];\n    return ctx.prisma.userModule.findMany({ where: { userId: user.sub } });\n  },\n};\n","import { Context } from \"@graphql/resolvers/typedefs\";\n\nexport const Mutation = {\n  createModule: async (\n    _: unknown,\n    args: { title: string; description: string },\n    ctx: Context\n  ) => {\n    const { prisma, user } = ctx;\n    // console.log({ user });\n\n    if (!user || user.role !== \"ADMIN\") {\n      throw new Error(\"Not authorized\");\n    }\n    return prisma.module.create({\n      data: { title: args.title, description: args.description },\n    });\n  },\n\n  updateProgress: async (\n    _: unknown,\n    { moduleId, progress }: { moduleId: string; progress: number },\n    ctx: Context\n  ) => {\n    const user = ctx.user;\n    console.log({ user });\n\n    if (!user) {\n      throw new Error(\"Not authenticated\");\n    }\n    return ctx.prisma.userModule.upsert({\n      where: { userId_moduleId: { userId: user.sub, moduleId } },\n      create: { userId: user.sub, moduleId, progress },\n      update: { progress },\n    });\n  },\n};\n"],"mappings":"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","names":["fastify","z","app","fastify"]}